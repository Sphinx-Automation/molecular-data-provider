# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class CompoundInfoIdentifiers(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pubchem=None, drugbank=None, chembl=None, chebi=None, hmdb=None, mychem_info=None):  # noqa: E501
        """CompoundInfoIdentifiers - a model defined in OpenAPI

        :param pubchem: The pubchem of this CompoundInfoIdentifiers.  # noqa: E501
        :type pubchem: str
        :param drugbank: The drugbank of this CompoundInfoIdentifiers.  # noqa: E501
        :type drugbank: str
        :param chembl: The chembl of this CompoundInfoIdentifiers.  # noqa: E501
        :type chembl: str
        :param chebi: The chebi of this CompoundInfoIdentifiers.  # noqa: E501
        :type chebi: str
        :param hmdb: The hmdb of this CompoundInfoIdentifiers.  # noqa: E501
        :type hmdb: str
        :param mychem_info: The mychem_info of this CompoundInfoIdentifiers.  # noqa: E501
        :type mychem_info: str
        """
        self.openapi_types = {
            'pubchem': str,
            'drugbank': str,
            'chembl': str,
            'chebi': str,
            'hmdb': str,
            'mychem_info': str
        }

        self.attribute_map = {
            'pubchem': 'pubchem',
            'drugbank': 'drugbank',
            'chembl': 'chembl',
            'chebi': 'chebi',
            'hmdb': 'hmdb',
            'mychem_info': 'mychem_info'
        }

        self._pubchem = pubchem
        self._drugbank = drugbank
        self._chembl = chembl
        self._chebi = chebi
        self._hmdb = hmdb
        self._mychem_info = mychem_info

    @classmethod
    def from_dict(cls, dikt) -> 'CompoundInfoIdentifiers':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The compound_info_identifiers of this CompoundInfoIdentifiers.  # noqa: E501
        :rtype: CompoundInfoIdentifiers
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pubchem(self):
        """Gets the pubchem of this CompoundInfoIdentifiers.

        PubChem CID of the compound (CURIE).  # noqa: E501

        :return: The pubchem of this CompoundInfoIdentifiers.
        :rtype: str
        """
        return self._pubchem

    @pubchem.setter
    def pubchem(self, pubchem):
        """Sets the pubchem of this CompoundInfoIdentifiers.

        PubChem CID of the compound (CURIE).  # noqa: E501

        :param pubchem: The pubchem of this CompoundInfoIdentifiers.
        :type pubchem: str
        """

        self._pubchem = pubchem

    @property
    def drugbank(self):
        """Gets the drugbank of this CompoundInfoIdentifiers.

        DrugBank id of the compound (CURIE).  # noqa: E501

        :return: The drugbank of this CompoundInfoIdentifiers.
        :rtype: str
        """
        return self._drugbank

    @drugbank.setter
    def drugbank(self, drugbank):
        """Sets the drugbank of this CompoundInfoIdentifiers.

        DrugBank id of the compound (CURIE).  # noqa: E501

        :param drugbank: The drugbank of this CompoundInfoIdentifiers.
        :type drugbank: str
        """

        self._drugbank = drugbank

    @property
    def chembl(self):
        """Gets the chembl of this CompoundInfoIdentifiers.

        ChEMBL id of the compound (CURIE).  # noqa: E501

        :return: The chembl of this CompoundInfoIdentifiers.
        :rtype: str
        """
        return self._chembl

    @chembl.setter
    def chembl(self, chembl):
        """Sets the chembl of this CompoundInfoIdentifiers.

        ChEMBL id of the compound (CURIE).  # noqa: E501

        :param chembl: The chembl of this CompoundInfoIdentifiers.
        :type chembl: str
        """

        self._chembl = chembl

    @property
    def chebi(self):
        """Gets the chebi of this CompoundInfoIdentifiers.

        ChEBI id of the compound (CURIE).  # noqa: E501

        :return: The chebi of this CompoundInfoIdentifiers.
        :rtype: str
        """
        return self._chebi

    @chebi.setter
    def chebi(self, chebi):
        """Sets the chebi of this CompoundInfoIdentifiers.

        ChEBI id of the compound (CURIE).  # noqa: E501

        :param chebi: The chebi of this CompoundInfoIdentifiers.
        :type chebi: str
        """

        self._chebi = chebi

    @property
    def hmdb(self):
        """Gets the hmdb of this CompoundInfoIdentifiers.

        HMDB id of the compound (CURIE).  # noqa: E501

        :return: The hmdb of this CompoundInfoIdentifiers.
        :rtype: str
        """
        return self._hmdb

    @hmdb.setter
    def hmdb(self, hmdb):
        """Sets the hmdb of this CompoundInfoIdentifiers.

        HMDB id of the compound (CURIE).  # noqa: E501

        :param hmdb: The hmdb of this CompoundInfoIdentifiers.
        :type hmdb: str
        """

        self._hmdb = hmdb

    @property
    def mychem_info(self):
        """Gets the mychem_info of this CompoundInfoIdentifiers.

        myChem.info id of the compound.  # noqa: E501

        :return: The mychem_info of this CompoundInfoIdentifiers.
        :rtype: str
        """
        return self._mychem_info

    @mychem_info.setter
    def mychem_info(self, mychem_info):
        """Sets the mychem_info of this CompoundInfoIdentifiers.

        myChem.info id of the compound.  # noqa: E501

        :param mychem_info: The mychem_info of this CompoundInfoIdentifiers.
        :type mychem_info: str
        """

        self._mychem_info = mychem_info
